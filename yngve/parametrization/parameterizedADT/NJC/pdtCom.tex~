\section{Composition and refinement}\label{se:compref}
%
We will now review various ways of composing specifications of parameterized
data types. We will discuss the classical vertical and horisontal
composition, showing the counterparts of the standard compositionality
theorems. The main difference will concern the fact that, in general,
stepwise application of constructions will not yield the same result as a direct
construction along the respective composition, but a refinement of the latter.
Subsections~\ref{sub:vcsyn} and \ref{sub:vcsem} discuss vertical, and
\ref{sub:hcsyn} and \ref{sub:hcsem} horisontal
compostion. Section~\ref{sub:ref} will summarize the concept of refinement
which emerges from this section.

We recall that, given a parameter passing diagram (like 1. below in
Figure~\ref{fi:vertcomp}), by proposition~\ref{prop:paramtoo},
$\mu':\thr{Y_{\nu(\weak)}}\to \thr{P[Y]_\cons}$ is a parameterization
morphism, and hence, in particular (by fact~\ref{fa:weakparamo}), $\mu':\thr
Y_\weak\to\thr{P[Y]_\cons}$ is a specification morphism.


\subsection{Vertical composition}\label{sub:vcsyn}
Given two actual prameter passing morphisms $\nu:\thr X_\weak\to \thr
Y_{\nu(\weak)}$ and $\rho:\thr Y_\weak\to \thr Z_{\rho(\weak)}$,
(as indicated in the diagrams 1. and 2. in Figure~\ref{fi:vertcomp}), 
we would like to compose them vertically, i.e.,
we want to show that also $(\nu;\rho):\thr X_\weak \to \thr Z_{(\nu;\rho)(-)}$ is
an actual parameter passing.\vspace*{-2ex}

\begin{figure}[hbt]
\[\xymatrix@R=0.4cm@C=1.5cm{
\thr X_\weak \ar[r]^\mu \ar[dd]_\nu   \ar@(l,l)[dddddd]_{\nu;\rho}  \ar@{}[ddr]|{1.}
  & \thr{P[X]_\cons} \ar[dd]^{\nu'} \ar@(r,r)[dddddd]^{(\nu;\rho)'} \\ \\ 
\thr Y_{\nu(\weak)} \ar[r]^{\mu'} & \thr{P[Y]_\cons} \\ 
%
\thr Y_\weak \ar[r]^{\mu'} \ar[dd]_\rho \ar@{}[ddr]|{2.}
  & \thr{P[Y]_\cons} \ar[dd]^{\rho'} \\ \\ 
\thr Z_{\rho(\weak)} \ar[r]^{\mu''} & \thr{P[Z]_\cons} \\ 
\thr Z_{(\nu;\rho)(\weak)} \ar[r]^{\mu'''} & \thr{P[Z]'_\cons} \\ 
}
\]
\caption{}\label{fi:vertcomp}\vspace*{-1ex}
\end{figure}

\noindent
The notation from this figure will be used throughout this and next
subsection (\ref{sub:vcsyn}, \ref{sub:vcsem}).

In general, the specifications $\thr{Z_{\rho(\weak)}}$ and
$\thr{Z_{(\nu;\rho)(\weak)}}$ need not be the same -- the latter may have
more global guards than the former.
\begin{fact}\label{fa:triv}
Given a PDT $\pdtsimple{\mu}{\delta}{\thr X_\cons}{\thr{P[X]_\cons}}$
and actual parameter passing $\nu$
and $\rho$ as in the Figure~\ref{fi:vertcomp}: 
\begin{enumerate}\MyLPar
\item $\thr{Z_{(\nu;\rho)(\weak)}}\models \thr{Z_{\rho(\weak)}}$.
\item If $\nu$ is surjective on the sorts, then $\thr{Z_{\rho(\weak)}}\models
\thr{Z_{(\nu;\rho)(\weak)}}$.
\item If $\nu$ is
surjective on the sorts, then $\thr{Z_{(\nu;\rho)(\weak)}} \iso \thr{Z_{\rho(\weak)}}$.
\end{enumerate}
\end{fact}
\begin{PROOF}
Direct from definition~\ref{def:weakalong}. Obviously, both specifications
have isomorphic signatures (so, for simplicity, we assume that the are
equal). Also, all the axioms except, possibly, some global 
guards, are involved in both pushout constructions and will be satisfied by
both specifications. The only difference may concern absence in
$\thr{Z_{\rho(\weak)}}$  of some global which are present in
$\thr{Z_{(\nu;\rho)(\weak)}}$. 
\begin{enumerate}\MyLPar
\item  All sorts which are in the
image of $(\nu;\rho)$ are also in the image of $\rho$, so the global guards
dropped in $\thr{Z_{(\nu;\rho)(\weak)}}$ are also dropped in
$\thr{Z_{\rho(\weak)}}$. 
\item If $\nu$ is surjective on the sorts then if a sort is in the image of
$\rho$ it will also be in the image of $(\nu;\rho)$. Hence all global guards
from $\thr{Z_{(\nu;\rho)(\weak)}}$ will also be present in $\thr{Z_{\rho(\weak)}}$.
\item If $\nu$ is surjective on the sorts, then the ismorphism follows from the
two points above. \vspace*{-2ex}
\end{enumerate}
\end{PROOF}
Notice that, in points 2. and 3., surjectivity of $\nu$ on sorts is sufficient but
not necessary condition. It is sufficient and necessary that for any sort $s\in\Sigma(\thr{Y})$
which is not in the image of $\nu$, there is a sort  $s'\in\Sigma(\thr{Y})$ which
is in the image of $\nu$ and such that $\rho(s)=\rho(s')$.
%
\begin{proposition}\label{prop:vertcomp}
If 
$\nu:\thr X_\weak\to \thr Y_{\nu(\weak)}$ and $\rho:\thr Y_\weak\to \thr Z_{\rho(\weak)}$
 are actual parameter passing
morphisms, then so is $(\nu;\rho):\thr X_\weak \to \thr Z_{(\nu;\rho)(\weak)}$
(see the diagram in Figure~\ref{fi:vertcomp}). 
\end{proposition}
\begin{PROOF}
We have both $\nu(\cons_s)=\cons_{\nu(s)}$ and
$\rho(\cons_{s'})=\cons_{\rho(s')}$ for all sort symbols $s\in\Sigma(\thr X)$
and $s'\in\Sigma(\thr Y)$, and thus
$(\nu;\rho)(\cons_s)=\cons_{(\nu;\rho)(s)}$. We show that
$(\nu;\rho):\thr X_\weak \to \thr Z_{(\nu;\rho)(\weak)}$ is
a specification morphism, i.e., $\thr Z_{(\nu;\rho)(\weak)} \models
(\nu;\rho)(\thr X_\weak)$.
\[
\begin{array}{rrl}
&{\rm fact\ \ref{fa:triv}} :& \thr Z_{(\nu;\rho)(\weak)}\models \thr Z_{\rho(\weak)} \nonumber \\
&\rho\ {\rm is\ a\ specification\ morphism} :& \thr Z_{\rho(\weak)}\models\rho(\thr Y_\weak) \nonumber \\
& \To & \thr Z_{(\nu;\rho)(\weak)}\models\rho(\thr Y_\weak) \label{eq:mod}
\end{array}
\]
Now, the axioms of $\thr Y_{\nu(\weak)} =  (\Phi,\Gamma')$, where $\Gamma'$
is the subset of global guards from $\thr Y_\cons$ which (whose sort symbols)
are not in the image
of $\nu$. To complete the proof we have to show that $\thr
Z_{(\nu;\rho)(\weak)}\models \rho(\Gamma')$.
But this follows directly from definition~\ref{def:weakalong}. For any
global guard $\gamma\in\Gamma'$ is {\em not} in the image of $\nu$ and hence
it will {\em not} be in the image of $\nu;\rho$. Consequently, if
$\gamma\in\Gamma'$ then
$\rho(\gamma)\in\thr Z_{(\nu;\rho)(\weak)}$ (though not necessarily 
 $\rho(\gamma)\in \thr Z_{\rho(\weak)}$!!).

Thus $\thr Z_{(\nu;\rho)(\weak)}\models \rho(\Gamma')$ which together with (\ref{eq:mod})
yields
\eq{
\thr Z_{(\nu;\rho)(\weak)}\models \rho(\thr Y_{\nu(\weak)}).
\label{eq:modB}
}
In diagram 1. $\nu$ is a parameter passing, so $\thr
Y_{\nu(\weak)}\models \nu(\thr X_\weak)$ which implies  
$\rho(\thr Y_{\nu(\weak)})\models (\nu;\rho)(\thr X_\weak)$.
This, together with (\ref{eq:modB}) give the conclusion: 
$\thr Z_{(\nu;\rho)(\weak)}\models (\nu;\rho)(\thr X_{\weak}))$.
\end{PROOF}
%
In general, the specifications $\thr{P[Z]_\cons}$ and
$\thr{P[Z]'_\cons}$ may be different. In the classical case, this is merely a
consequence of their definition by pushout (which is unique only up to
isomorphism). In our case, however, the difference may be more significant,
since we also may drop and/or add some global guards on the way. As in
fact~\ref{fa:triv}, 
the only difference may concern the presence/absence of global guards (since
all other axioms are involved in the pushout construction), so these are the only
axioms we mention in the following example.
\begin{example}\label{ex:difpush}
Consider first two instantiations $\nu:{\thr
X_\weak}\to\thr{Y_{\nu(\weak)}}$ and 
$\rho:{\thr Y_\weak}\to\thr{Z_{\rho(\weak)}}$. (Two lines in $\thr{Y_{\nu(\weak)}}$,
$\thr{Y_\weak}$, etc. represent two distinct sorts which are identified by
the second instantiation $\rho$.)
\[\xymatrix@R=0.5cm@C=0.7cm{
\thr{X_\weak} \ar[dd]^\nu & &\cons  \save[].[]*\frm{.}\restore  \ar[rr]^{\mu} \ar[dd] && 
    c \save[].[rrrr]*\frm{.}\restore \ar[dd] & & \cons \ar[dd] && x\prec
  \cons \ar@{.>}[dd] & \thr{P[X]_\cons} \ar[dd]_{\nu'}\\ 
&& && && && \\
\thr{Y}_{\nu(\weak)}& & \cons \ar[rr]^{\mu'} && c  && \cons && x \prec\cons
    \save[].[dllll]*\frm{.}\restore  & \thr{P[Y]_\cons}\\
 & y\prec \cons_1\ \ \ \cons_1 \save[].[ru]*\frm{.}\restore
    \ar[rrrr]^{\mu'} &&&& 
   \cons_1 &&  y\prec\cons_1 & % \\ \\
}\]
\[\xymatrix@R=0.5cm@C=0.7cm{
%%% next inst
\thr{Y_\weak}\ar[ddd]^{\rho} & \cons_1 \save[].[dr]*\frm{.}\restore \ar[dddr]\ar[rrrr]_{\mu'}
&&&&  \cons_1 \ar[dddl] && y\prec \cons_1 \ar@{.>}[ddd] &  & \thr{P[Y]_\cons}
  \ar[ddd]_{\rho'}\\
 & & \cons \ar[dd]_\rho  \ar[rr]_{\mu'} && c \ar[dd] && \cons \ar[dd] 
  && x\prec\cons \save[].[ullll]*\frm{.}\restore  \ar@{.>}[dd]\\ 
& & && && && \\
 \thr{Z_{\rho(\weak)}} & & \cons' \save[].[]*\frm{.}\restore \ar[rr]^{\mu''} && 
  \cons' \save[].[rrrr]*\frm{.}\restore && \cons & y\prec\cons' & x \prec
 \cons & \thr{P[Z]_\cons}
}
\]
And now a direct instantiation along $\comp{\nu}{\rho}$:
\[\xymatrix@R=0.3cm@C=0.9cm{
\thr{X_\weak} \ar[ddd]_{(\nu;\rho)} & \cons \save[].[]*\frm{.}\restore \ar[ddd] \ar[rr]^\mu && 
  c \save[].[rrrr]*\frm{.}\restore \ar[ddd] 
   && \cons \ar[ddd] && x\prec\cons \ar@{.>}[ddd] & \thr{P[X]_\cons} \ar[ddd]_{(\nu;\rho)'}\\
 & && &&&&& \\  & && &&&&& \\
\thr{Z_{(\nu;\rho)(\weak)}} & \cons' \save[].[]*\frm{.}\restore \ar[rr]^{\mu'''} && 
  \cons'  \save[].[rrrr]*\frm{.}\restore
   && \cons  && x\prec\cons  & \thr{P[Z]'_\cons}
}
\]
Both $\thr{P[Z]_\cons}$ and $\thr{P[Z]'_\cons}$  have isomorphic
signatures: in the former  $\allcons = \{\cons,\cons'\}$, while in the
latter ${\allcons}'=\{\cons,c\}$. 

The significant difference consists in that  $\thr{P[Z]_\cons}$  has the
global guard for $\mu''(\cons)$, namely $y\prec\cons'$ originating from
$\thr{P[Y]_\cons}$. (Thus here $\Cons=\{\cons,\cons'\}$ and $\subcons=\emptyset$.)
In $\thr{P[Z]'_\cons}$, on the other hand, this guard is
not present. (So here $\Cons'= \{\cons\}$, while ${\subcons}'=\{\cons'\}$.)

Thus, the PDT
$\pdtsimple{\mu''}{whoever}{\thr{Z_\cons}}{\thr{P[Z]_\cons}}$ would forbid
extending the carrier of $\cons'$, while
$\pdtsimple{\mu'''}{whoever}{\thr{Z_\cons}}{\thr{P[Z]'_\cons}}$ would not.
\end{example}
%
So, in general, $\thr{P[Z]_\cons}$
and $\thr{P[Z]'_\cons}$ are not isomorphic. We have the following fact.
\begin{fact}\label{fa:pzpz}
With the notation from Figure~\ref{fi:vertcomp} and
example~\ref{ex:difpush}:
\begin{enumerate}\MyLPar
\item $\thr{P[Z]_\cons}\models \thr{P[Z]'_\cons}$.
\item if $\thr{P[Z]'_\cons}\not\models \thr{P[Z]_\cons}$, then it is only
because for some sort constant(s) $c: \thr{P[Z]_\cons}\models x\prec c$ and
$\thr{P[Z]'_\cons}\not\models x\prec c$. 
\end{enumerate}
\end{fact}
\begin{PROOF}
The signatures of both specifications will be isomorphic, so we assume that they are
identical. All axioms except global guards are involved in the pushout
constructions, so their presence (or satisfaction) follows from the standard
isomorphism of pushout objects. The difference may concern only some constants which are in $\Cons$ but
not in $\Cons'$ (only in ${\subcons}'$, as in the
example~\ref{ex:difpush}). This justifies point 2.
For point 1. we show that if $\cons\in\Cons'$ then
$\cons\in\Cons$, that is if $\thr{P[Z]'_\cons}\models x\prec\cons$ then
$\thr{P[Z]_\cons}\models x\prec\cons$, which will yield the conclusion.

This follows trivially. Any global guard $x\prec\cons$ in $\thr{P[Z]'_\cons}$
is an image of a respective global guard either from
$\thr{Z_{(\nu;\rho)(\weak)}}$ or from $\thr{P[X]_\cons}$. In the latter case,
it will also be present in $\thr{P[Y]_\cons}$ and hence also in
$\thr{P[Z]_\cons}$. 

In the former case, if this guard is also in $\thr{Z_{\rho(\weak)}}$ it will
be present in $\thr{P[Z]_\cons}$. If it does not belong to
$\thr{Z_{\rho(\weak)}}$, this means that it (its sort) is in the image of
$\rho$ (and therefore was dropped). But then, its $\rho$ pre-image must be in
$\thr{Y_\cons}$, that is, must be present in $\thr{P[Y]_\cons}$. But then it
is also present in $\thr{P[Z]_\cons}$ as the result of pushout construction.
\end{PROOF}
The fact that stepwise instantiation (of $\thr X_\cons$ by $\thr Y_\cons$ and then by
$\thr Z_\cons$ leading to $\thr{P[Z]_\cons}$) yields a different result than the direct instantiation
(of $\thr X_\cons$ by $\thr{Z_\cons}$ leading to $\thr{P[Z]'_\cons}$) may look like a severe weakness of our
setting. After all, equality of these two indicates the desirable
compositionality which would be expected by anybody familiar with the
traditional, pushout based theory of parameterized specifications. 

However,
we are not developing a theory of parameterized specifications but of
specification of parameterized data types. This means, we are interested in
constructions allowing us to obtain new data types (algebras) from others. In
this setting, performing different series of constructions or, as in the case
of vertical composition, performing constructions in different ways, may be
expected to yield different results. 

Our point is that stepwise instantaition, first along $\nu$ and then along
$\rho$ represents a slightly different construction that direct instantition
along $\eta=\nu;\rho$. In fact, we sugest to think of the former as a refinement
of the latter. The latter is a one step construction along $\eta$. In this
sense, splitting this construction in two steps, first along $\nu$ and then
$\rho$, is a more detailed, refined construction which may introduce new
aspects. We certainly want the result of this refined construction to be
``compatible'' with the results prescribed by the more rough, one step
construction. This is the meaning of one construction refining another which
corresponds to the classical concept of refinement by model class
inclusion. This is indicated by the fact~\ref{fa:pzpz}.1 and we now
proceed to illustrate the semantic aspect of this refinement.

\subsection{Vertical composition -- semantics}\label{sub:vcsem}
%
As noted in section~\ref{sub:appsem}, we can view the semantics of
instantiation from two angles: on the one hand, as a new PDT with a class of
its semantic functors and, on the other hand, as an actualisation: a functor
for the resulting PDT induced by a
particular functor for the instantiated PDT. We now apply this distinction in
the discussion of the semantics of vertical composition.

\subsubsection{Vertical composition as a refinement of PDT}\label{sub:vertref}
We postpone the general definition of refinement to section~\ref{sub:ref} and for
the moment take it intuitively to mean:
a PDT  $\thr P=\pdt$ is a {\em
refinement} of a PDT  $\thr
P'=\pdtsp{\mu'}{\delta'}{\thr{X'_\cons}}{\thr{P[X]'_\cons}}$, $\thr
P'\leadsto \thr P$, if any semantic 
functor for $\thr P$ can be used for obtaining 
a semantic functor for $\thr P'$.

A trivial, though by no means only, example of such a refinement is when
$\thr{P[X]'_\cons}\leadsto\thr{P[X]_\cons}$, i.e.,
$\Mod(\thr{P[X]'_\cons})\supseteq \Mod(\thr{P[X]_\cons})$, while other
components are equal. This is, in fact, the case with the results of vertical
composition. If we view $\thr{P[Z]_\cons}$ and $\thr{P[Z]'_\cons}$ as two
independent PDTs (i.e., ``forget'' that they both originate from instantiation
of the same PDT), we see that, 
by fact~\ref{fa:pzpz}, $\thr{P[Z]_\cons}\models
\thr{P[Z]'_\cons}$, i.e., we have an inclusion (functor)
$\fu i:\Mod(\thr{P[Z]_\cons})\subseteq\Mod(\thr{P[Z]'_\cons})$. 
Thus any semantic functor $\fu F$ for $\thr P= \pdtsp{\mu''}{\delta''}{\thr
Z_\cons}{\thr{P[Z]_\cons}}$ 
gives a semantic functor for $\thr P'= \pdtsp{\mu'''}{\delta'''}{\thr
Z_\cons}{\thr{P[Z]'_\cons}}$, simply 
by composing $\comp{\fu F}{\fu i}$.
The other components of both PDTs are (essentially) the same, and so we get
%
\begin{fact}
Given $\thr P= \pdtsp{\mu''}{\delta''}{\thr
Z_\cons}{\thr{P[Z]_\cons}}$ and  $\thr P'= \pdtsp{\mu'''}{\delta'''}{\thr
Z_\cons}{\thr{P[Z]'_\cons}}$ (as in Figure~\ref{fi:vertcomp}), $\thr P'\leadsto \thr P$.
\end{fact}
%
Refinement amounts in this case to the situation illustrated in
example~\ref{ex:difpush}, namely, that while $\thr P'$ may allow extension of
some carriers (corresponding to $\cons'$ in the example), $\thr P$ may forbid
it by introducing additional global guards. Thus, in general, all semantic
functors for $\thr P$ are also semantic functors for $\thr P'$, but there may
be some functors for $\thr P'$ which are not valid semantic functors for
$\thr P$.

\subsubsection{Vertical composition as an actualisation of a particular semantic
functor}
There is, however, a more specific relation between the stepwise
instantiation and the direct one. According to
proposition~\ref{prop:inducedapp}, any semantic functor $\fu F_X$ for $\pdt$
induces a semantic functor $\fu F_Y$ for any instantiation of formal
parameter $\thr X_\cons$ by an actual parameter $\thr Y_\cons$. 
If we now consider the results of respective actualisations, i.e., functors
$\fu F_Z$ (obtained by stepwise actualisation through $\thr Y_\cons$ first
along $\nu$ and then $\rho$) and
$\fu F'_Z$ (obtained by direct actualisation along $(\nu;\rho)$) which are
both induced starting from the same, given $\fu F_X$, then it turns out that
the semantics is fully compositional, i.e., both functors are equal.

We discuss it in more detail.
The semantic counterpart of the diagram from Figure~\ref{fi:vertcomp} is
shown below.
\[
\hspace*{-3em}\xymatrix@C=0.8cm@R=1cm{
&&&& \Mod(\thr X_\cons) \ar[dr]^{\fu F_X} \ar[d]^{\iota_X} & \\
&&& \Mod(\thr Y_\cons)  \ar[dr]^>>>{\fu F_Y} \ar[d]^{\iota_{Y1}}
\ar[ur]^{|_{\nu}} \ar@{.}[dl]|{=} 
     & \Mod(\thr X_\weak) & \Mod(\thr{P[X]_\cons}) \ar[l]_{|_{\mu}} \\
&& \Mod(\thr Y_\cons) \ar[dr]^>>>{\fu F'_Y} \ar[d]^{\iota_Y} 
     & \Mod(\thr Y_{\nu(\weak)}) \ar[ur]^>>>>>{|_{\nu}} \ar@{^{(}.>}[dl]
     & \Mod(\thr{P[Y]_\cons}) \ar[l]^{|_{\mu'}} \ar[ur]^{|_{\nu'}}
     \ar@{.}[dl]|{=} \\
& \Mod(\thr Z_\cons) \ar[ur]^{|_\rho} \ar[d]^{\iota_Z} \ar[dr]^>>>{\fu F_Z} & \Mod(\thr Y_\weak) &
       \Mod(\thr{P[Y]_\cons}) \ar[l]_{|_{\mu'}} \\
\Mod(\thr Z_\cons) \ar[d]_{\iota_{Z1}} \ar[dr]^>>>{\fu F'_Z} \ar@{.}[ur]|{=}\ar@/^3pc/[uuuurrrr]^{|_{(\nu;\rho)}}
     & \Mod(\thr Z_{\rho(\weak)}) \ar[ur]^>>>>>{|_{\rho}} &
       \Mod(\thr{P[Z]_\cons}) \ar[l]^{|_{\mu''}} \ar[ur]_{|_{\rho'}}
       \ar@{^{(}.>}[dl]^{\fu i} \\
\Mod(\thr Z_{(\nu;\rho)(\weak)}) \ar@{^{(}.>}[ur]
    & \Mod(\thr{P[Z]'_\cons}) \ar[l]^{|_{\mu'''}}   \ar@/_3pc/[uuuurrrr]_{|_{(\nu;\rho)'}}
}
\]
Given a semantic functor $\fu F_X$ (in the uppermost diagram),
proposition~\ref{prop:inducedapp} allows us to construct a functor $\fu F_Y$,
and similarly, an $\fu F_Z$ can be constructed given an arbitrary $\fu F'_Y$. Thus, using
$\fu F_Y$ obtained from the actualisation along $\nu$ for $\fu F'_Y$, we can
construct an $\fu F_Z$ from a given $\fu F_X$. Notice that the associated
$\iota_Z$ guarantees the image of $\Mod(\thr Z_\cons)$ to be
included in $\Mod(\thr Z_{\rho(\weak)})$. 

For the direct actualisation, we can obtain $\fu F'_Z$ from a given $\fu
F_X$ by proposition~\ref{prop:inducedapp}. On the other hand,
by fact~\ref{fa:pzpz}, we also have the inclusion (functor) 
$\fu i:\Mod(\thr{P[Z]_\cons})\subseteq\Mod(\thr{P[Z]'_\cons})$.  
Hence, composing we obtain $\comp{\fu
F_Z}{\fu i}:\Mod(\thr{Z_\cons})\to\Mod(\thr{P[Z]'_\cons})$, which gives a
possible semantic functor $\fu F'_Z$ for the PDT
$\thr P'=\pdtsp{\mu'''}{\delta'''}{\thr{Z_\cons}}{\thr{P[Z]'_\cons}}$. 
Compositionality of actualisation is expressed in the following proposition.
%
\begin{proposition}
With the notation from the diagram above, where all functors are induced by
$\fu F_X$ (in particular, $\fu F_Y=\fu F'_Y$ and $\iota_Y=\iota_{Y1}$):
$\fu F_Z;\fu i = \fu F'_Z$.
\end{proposition}
\begin{PROOF}
The discussion above shows that $\fu F_Z;\fu i$ is a possible semantic
functor for $\thr P'$. To show the equality to $\fu F'_Z$ induced by a direct
actualisation, there remains a couple of tedious  details. 
\\[1ex]
I. Firstly, $\iota_{Z1}$, associated with the functor $\fu F'_Z$ obtained from the direct
actualisation, will include $\Mod(\thr Z_\cons)$ 
in $\Mod(\thr Z_{(\nu;\rho)(\weak)})$, while $\iota_Z$ associated with $\fu
F_Z$ obtained through the stepwise actualisation guarantees only inclusion in
$\Mod(\thr{Z_{\rho(\weak)}})$. 
We show that it actually is a special case
of a functor obtained from a direct actualisation, i.e., that actually $\comp{\fu
F_Z}{|_{\mu''}}:\Mod(\thr{Z_\cons})\to \Mod(\thr{Z_{(\nu;\rho)(\weak)}})$ --
the lowest square (with two inclusions and reducts) commutes.
\\[1ex]
I.1. This is unproblematic when $\thr Z_{\rho(\weak)}=\thr Z_{(\nu;\rho)(\weak)}$,
so let us consider the case when they are not equal. Then there is a global
guard $x\prec c_s$ (of sort $s$) which is included in $\thr Z_{(\nu;\rho)(\weak)}$ but not in
$\thr Z_{\rho(\weak)}$. This means that for any algebra
$A\in\Mod(\thr{Z_\cons})$, $(\fu F'_Z(A))|_{\mu'''}\models x\prec c$ -- in
other words, $\fu F'_Z$ does not extend the carrier of $s$. 
\\[1ex]
I.2. In principle,
from the diagram, it might look that $\fu F_Z$ might extend this carrier
since we may have $x\prec c_s \not\in \thr Z_{\rho(\weak)}$. However, this
last fact holds only if $s$ is in the image of $\rho$ (which makes the
respective global guards disappear from $\thr Z_{\rho(\weak)}$). At the same
time, since the guard is present in $\thr Z_{(\nu;\rho)(\weak)}$, it means
that $s$ is not in the imahge of $(\nu;\rho)$ -- hence its $\rho$ pre-image $s'$ must not be in the
image of $\nu$. 
\\[1ex]
I.3. This means that the respective guard $x\prec c_{s'}\in \thr
Y_{\nu(\weak)}$ and, by the pushout construction, 
$x\prec c_{s'}\in \thr{P[Y]_\cons}$. But then the respective guard $x\prec
\rho'(c_{s'})=c_s$ will also appear in $\thr{P[Z]_\cons}$. Finally, since $s'$ is
not in the image of $\nu$, we get $\mu'(c_{s'})=c_{s'}$, which implies that
also $\mu''(c_{s})=c_{s}$. In short $\fu F_Z$ will not, after all, extend
the carrier of sort $s$, and hence $(\fu F_Z(A))|_{\mu''} \in \Mod(\thr
Z_{(\nu;\rho)(\weak)})$. 
\\[1ex]
II. To prove the main claim, we need to look at the details of definitions of
induced functors. What we have to show is that the following two are equal
for any $A\in\Mod(\thr Z_\cons)$ (cf. definition~\ref{def:actinstfunct}):
\begin{enumerate}\MyLPar
\item $\fu F'_Z(A) = \iota_{Z1}(A) \amalgam_{\iota_{Z1}(A)|_{(\nu;\rho)}} \fu
F_X(A|_{(\nu;\rho)})$ -- direct actualisation, and
\item $\fu F_Z(A) = \iota_{Z}(A) \amalgam_{\iota_{Z}(A)|_{\rho}} \fu
F_Y(A|_{\rho})$, where 
$\fu F_Y(A|_\rho) = \iota_{Y1}(A|_\rho) \amalgam_{\iota_{Y1}(A|_\rho)|_{\nu}} \fu F_X((A|_{\rho})|_\nu)$.
\end{enumerate}
The problem here might possibly originate from the situation as in
fact~\ref{fa:pzpz}.2 which was illustrated in example~\ref{ex:difpush}, i.e.,
that $\fu F'_Z(A)$ yields an algebra which does not satisfy the global guard
$x\prec c$ satisfied by all algebras in $\Mod(\thr{P[Z]_\cons})$. Showing
equality of 1. and 2. we show, in particular, that such a situation does not occur.

Actually it will suffice to show that $\iota_{Z1}=\iota_Z$, 
because the induced functor is constructed from $\fu
F_X$ and $\iota$ (cf. def.~\ref{def:actparsem}, \ref{def:actinstfunct}). This
will, in particular, imply that  $(\iota_{Z1}(A))|_{(\nu;\rho)} =
((\iota_{Z}(A))|_{\rho})|_{\nu}$, for all algebras $A \in
\Mod(\thr{Z_\cons})$ -- the fact which is sufficient for concluding the
equality of two functors according to def.~\ref{def:actinstfunct}. The table
below lists the definitions of (the relevant) $\iota$'s induced by $\iota_X:$
\[\begin{array}{r|l|l|l}
     & a.\ \ \ \iota_{Z1}(A)   &  b.\ \ \ \iota_{Z}(A)  & c.\ \ \ \iota_Y(A|_\rho)\\ \hline
\Sorts:1.& if\ s \in \Sorts_X: & if\ s \in \Sorts_Y: & if\ s \in \Sorts_X: \\
  & \ \ \ (\nu;\rho)(s)^{\iota_{Z1}(A)}= s^{\iota_{X}(A|_{(\nu;\rho)})} &
  \ \ \ \rho(s)^{\iota_{Z}(A)}= s^{\iota_{Y}(A|_{\rho})}  &
  \ \ \ \nu(s)^{\iota_{Y}(A|_{\rho})}= s^{\iota_{x}((A|_{\rho})|_\nu)} 
\\
2.  & otherwise:{s}^{\iota_{Z1}(A)}= {s}^{A} &
    otherwise: {s}^{\iota_{Z}(A)}= {s}^{A} &
    otherwise: {s}^{\iota_{Y}(A|_\rho)}= {s}^{A|_{\rho}} 
\\ \hline
\Ops: 3.& 
  if\ \omega \in \Ops_{X}: & if\ \omega \in \Ops_{Y}: & if\ \omega \in \Ops_{X}:  
\\
 & \ \ \ (\nu;\rho)(\omega)^{\iota_{Z1}(A)}=   \omega^{\iota_{X}(A|_{(\nu;\rho)})} 
 & \ \ \  \rho(\omega)^{\iota_{Z}(A)}=   \omega^{\iota_{Y}(A|_{\rho})} 
 & \ \ \  \nu(\omega)^{\iota_{Y}(A|_\rho)}=   \omega^{\iota_{X}((A|_{\rho})|_\nu)} 
\\
4.  &  if\ \omega\not\in(\nu;\rho)[\Ops_X]: \omega(\ovr x)^{\iota_{Z1}(A)}
    &  if\ \omega\not\in\rho[\Ops_Y]: \omega(\ovr x)^{\iota_{Z}(A)}
    &  if\ \omega\not\in\nu[\Ops_X]: \omega(\ovr x)^{\iota_{Y}(A|_{\rho})}
\\
  & \ \ = \omega(\ovr x)^{A},\ if\ all\ \ovr x \in |A|
  & \ \ = \omega(\ovr x)^{A},\ if\ all\ \ovr x \in |A|
  & \ \ = \omega(\ovr x)^{A|_{\rho}},\ if\ all\ \ovr x \in |A|_\rho|
\\
 & \ \ = \emptyset,\ otherwise 
 & \ \ = \emptyset,\ otherwise 
 & \ \ = \emptyset,\ otherwise 
\end{array}
\]
For any symbol $s\in\Sigma(\thr{Z_\cons})$ we have three possibilities:
\begin{enumerate}\MyLPar
\item it is not in the image of $\rho$ (and hence not in the image of
$(\nu;\rho)$ either), or
\item it is in the image of $\rho$ but not of $(\nu;\rho)$, or 
\item it is in the image of $(\nu;\rho)$. 
\end{enumerate}
 To simplify the notation, we will ignore
possible renamings, e.g., in case 2) we will assume that $s=\rho(s)$, and
similarly, in case 3) that $s=\rho(s)=\rho(\nu(s))$. Justification of
equations, written $\isby{Rc}$, refers to row $R$, column $c$ in the table
above. We use functoriality of the reduct, i.e., the fact that
$(A|_\rho)|_\nu = A|_{(\nu;\rho)}$, without mentioning it.
Let us first consider the sorts.
\begin{enumerate}
\item $s^{\iota_{Z1}(A)} \isby{2a} s^A \isby{2b} s^{\iota_{Z}(A)}$
\item $s^{\iota_{Z}(A)} \isby{2b} s^{\iota_{Y}(A|_{\rho})} \isby{2c}
s^{A|_{\rho}} = s^A \isby{2a} s^{\iota_{Z1}(A)}$
\item $s^{\iota_{Z1}(A)} \isby{1a} s^{\iota_{X}(A|_{(\nu;\rho)})}
 = s^{\iota_{X}((A|_{\rho})|_{\nu})} \isby{1c} s^{\iota_{Y}(A|_{\rho})}
 \isby{1b} s^{\iota_{Z}(A)}$
\end{enumerate}
So, operations:
\begin{enumerate}
\item $\omega^{\iota_{Z1}(A)}(\ovr x) \isby{4a}
\left\{\begin{array}{ll}\omega^A(\ovr x) & if\ \ovr x\in|A| \\ \emptyset &
otherwise\end{array}\right\}\isby{4b} \omega^{\iota_{Z}(A)}(\ovr x)$.
\item By 4a. we have $\omega^{\iota_{Z1}(A)}$ as in the previous point. 
Since $\omega$ is not in the image of $\nu$,
we have
$\omega^{\iota_{Z}(A)} \isby{3b} \omega^{\iota_{Y}(A|_{\rho})}(\ovr x) \isby{4c}
\left\{\begin{array}{ll}\omega^{A|_{\rho}}(\ovr x) & if\ \ovr x\in|A|_\rho| \\ \emptyset &
otherwise\end{array}\right.$. But for all $\ovr x:\ovr x\in |A|\Iff \ovr
x\in|A|_\rho|$, since $\omega$, and hence all its sorts, are in the image of
$\rho$. Then also $\omega^A(\ovr x) = \omega^{A|_{\rho}}(\ovr x)$ which
proves the equality $\omega^{\iota_{Z}(A)}=\omega^{\iota_{Z1}(A)}$ in this case.
%
\item $\omega^{\iota_{Z1}(A)} \isby{3a} \omega^{\iota_{X}(A|_{(\nu;\rho)})} 
 = \omega^{\iota_{X}((A|_{\nu})|_{\rho})}
 \isby{3c} \omega^{\iota_{Y}(A|_{\rho})} \isby{3b} \omega^{\iota_{Z}(A)}$
\end{enumerate}\vspace*{-4ex}
\end{PROOF}\vspace*{-3ex}
%
\subsection{Horisontal composition}\label{sec:semfunccomp}\label{sub:hcsyn}
%Horisontal composition of PDTs is defined in the standard way.
\begin{definition}\label{def:horcomp}
For parameterized data type specifications
$\pdtsp{\mu}{\delta}{\thr{X_\cons}}{\thr{P[X]_\cons}}$ and
$\pdtsp{\mu'}{\delta'}{\thr{P[X]_\cons}}{\thr{W[P[X]]_\cons}}$,
we define their horisontal composition to be $\pdtsp{(\mu;\mu')}{(\delta;\delta')}{\thr
X_\cons}{\thr{W[P[X]]_\cons}}$. 
\end{definition}
%
\begin{proposition}\label{prop:horcomp}
The composition as defined in~\ref{def:horcomp} is (isomorphic to) a PDT. (In
the sense that there exists a $\thr{W[P[X]]'_\cons}\iso\thr{W[P[X]]_\cons}$
such that $\pdtsp{(\mu;\mu')}{(\delta;\delta')}{\thr
X_\cons}{\thr{W[P[X]]'_\cons}}$ is a PDT).
\end{proposition}
\begin{PROOF}
The first 4 points of definition~\ref{def:parametersyntax} are trivially
satisfied. We have to verify point~\ref{it:rel}. 
\\[1ex]
\ref{it:sat}. 
If, for some $\cons:\mu'(\mu(\cons))\not=\delta'(\delta(\cons))$ then either 1)
$\mu(\cons)\not=\delta(\cons)$ or 2)
$\mu'(\cons)\not=\delta'(\cons)$. 

Let us start with 1). By \ref{it:sat} of
definition~\ref{def:parametersyntax}, $\thr{P[Y]_\cons}$ contains the axiom
$\mu(\cons)\prec\delta(\cons)$. If both
$c_1=\mu(\cons)\not=\cons\not=\delta(\cons)=c_2$, then this axiom is actually
$c_1\prec c_2$ and,  by point~\ref{it:unguard}, 
$\mu'(c_1)\prec\mu'(c_2)\in\thr{W[P[X]]_\cons}$. But then also both $\delta'$ and
$\mu'$ are identities on $c_1,c_2$, i.e., this last axiom is in fact
$\mu'(\mu(\cons))\prec \delta'(\delta(\cons))$. 

If either $\delta(\cons)=\cons$ or $\mu(\cons)=\cons$, then we must have that
$\delta(\cons)=\cons$ since, if  $\mu(\cons)=\cons$, then by the presence of
$\mu(\cons)\prec\delta(\cons)$ in $\thr{P[X]_\cons}$, we would have to have also
$\delta(\cons)=\cons$. By point~\ref{it:unguard}, we have then
$\mu'(\mu(\cons))\prec \mu'(\cons)\in\thr{W[P[X]]_\cons}$, while by
\ref{it:sat}, $\mu'(\cons)\prec \delta'(\cons)=\delta'(\delta(\cons))\in\thr{W[P[X]]_\cons}$. But
then, adding the axiom $\mu'(\mu(\cons))\prec\delta'(\delta(\cons))$ yields
an isomorphic specification. 

Let us now consider the case 2). Having verified case 1), we can now assume that
$\mu(\cons)=\delta(\cons)$. If $\mu(\cons)=\delta(\cons)=c\not=\cons$, then
$\mu',\delta'$ are identities on $c$, which contradicts the assumption of
this case. I.e., $\delta(\cons)=\mu(\cons)=\cons$. But then by \ref{it:sat},
we have $\mu'(\cons)\prec\delta'(\cons)\in\thr{W[P[X]]_\cons}$, which is the
required axiom $\mu'(\mu(\cons))\prec\delta'(\delta(\cons))$. 
\\[1ex]
\ref{it:unguard}. 
This follows trivially: by~\ref{it:unguard},
$\mu(\phi)\in\thr{P[X]_\cons}$ and then, by the same point,
$\mu'(\mu(\phi))\in\thr{W[P[X]]_\cons}$. 
\\[1ex]
\ref{it:corax}. Follows equally easily. Let 
$x_1\prec\cons_1, \ldots ,x_m\prec\cons_m, \ovr{a} \to \ovr{b}$ be a fully
guarded axiom from $\thr{X_\cons}$. Then, by \ref{it:corax}, 
$x_1\prec\delta(\cons_1), \ldots ,x_m\prec\delta(\cons_m), \ovr{a} \to
\ovr{b}$ is in $\thr{P[X]_\cons}$. But then, by the same point, 
$x_1\prec\delta'(\delta(\cons_1)), \ldots ,x_m\prec\delta'(\delta(\cons_m)),
\ovr{a} \to \ovr{b}$ is in $\thr{W[P[X]]_\cons}$. 
\end{PROOF}

\subsection{Horisontal composition -- semantics}\label{sub:hcsem}
As was the case with vertical composition, horisontal composition of PDTs
gives us a more structured specification. 
According to
proposition~\ref{prop:horcomp}, composing horisontally two PDTs, we obtain a
new PDT with the associated class of semantic functors. 
We show that semantics of a PDT obtained by a stepwise, horisontal
composition of PDTs $\thr P=\pdt$ and $\thr
P'=\pdtsp{\mu'}{\delta'}{\thr{P[X]_\cons}}{\thr{W[P[X]]_\cons}}$, 
which can be written as $\thr P;\thr P'$, 
%$\pdt;\pdtsp{\mu'}{\delta'}{\thr{P[X]_\cons}}{\thr{W[P[X]]_\cons}}$, 
is a
refinement of the seamntics of the respective composed PDT 
$\pdtsp{(\mu;\mu')}{(\delta;\delta')}{\thr{X_\cons}}{\thr{W[P[X]]_\cons}}$ --
the former, possessing more structure in the form of the intermediary stage
$\thr{P[X]_\cons}$, may put additional restrictions on the admissible
functors. Yet, composition of such funtors will always yield a functor for
the composed PDT.
We show this fact first.
\begin{proposition}
Given PDTs $\pdt$ and
$\pdtsp{\mu'}{\delta'}{\thr{P[X]_\cons}}{\thr{W[P[X]]_\cons}}$, 
with the semantic functors
$\fu{F_\thr{X}}: \Mod(\thr{X_\cons}) \to 
\Mod(\thr{P[X]_\cons})$ and $\fu{F_\thr{P[X]}}: \Mod(\thr{P[X]_\cons}) \to
\Mod(\thr{W[P[X]]_\cons})$. The composition
$\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}:\thr{X_\cons} \to
\thr{W[P[X]]_\cons}$, is a semantic functor for
$\pdtsp{(\mu;\mu')}{(\delta;\delta')}{\thr{X_\cons}}{\thr{W[P[X]]_\cons}}$. 
\end{proposition} 
The proposition means that all the loops in the following diagram commute:
\[
\xymatrix@C=0.3cm{
&& \Mod(\thr{X_\cons}) \ar[dd]^{\iota_{\thr{X}}}
\ar@(l,l)[dddd]_{\iota'} \ar[rrdd]^{\fu{F_\thr{X}}}
\ar@(u,u)[rrrrdddd]^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}}\\ 
\\
&& \Mod(\thr{X_{\weak}}) \ar@{.>}[dd]^{\iota_{\thr{P[X]}}|_\mu}
&& \Mod(\thr{P[X]_\cons}) \ar[ll]_{|_{\mu}} \ar[dd]^{\iota_{\thr{P[X]}}} \ar[rrdd]^{\fu{F_\thr{P[X]}}}\\
\\
&&\Mod(\thr{X_{\weak}})
&& \Mod(\thr{P[X]_{\weak}}) \ar@{.>}[ll]_{|_{\mu}}
&& \Mod(\thr{W[P[X]]_\cons}) \ar[ll]_{|_{\mu'}} \ar@(d,d)[llll]_{|_{\comp{\mu}{\mu'}}}\\
\\
}
\]
\begin{PROOF}
First notice that, by fact~\ref{fa:weakparamo}, $\mu$ is also a
specification morphism $\thr X_\weak\to \thr{P[X]_\weak}$, and so $|_\mu$ is
also a functor $\Mod(\thr{P[X]_\weak})\to \Mod(\thr{X_\weak})$. Thus
$|_{\mu;\mu'}=|_{\mu'};|_\mu$ is a funtor
$\Mod(\thr{W[P[X]]_\cons})\to\Mod(\thr{X_\weak})$ as indicated on the
diagram.

The functor $\iota':\Mod(\thr{X_\cons})\to\Mod(\thr{X_\weak})$
coresponding to $\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}$ is defined by
$\iota' = \comp{\iota_{\thr{X}}}{(\iota_{\thr{P[X]}}|_\mu)}$, i.e., 
$\iota'(A)$ is given by:
\begin{itemize}\MyLPar
\item $s^{\iota'(A)} = s^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)}$, for
sorts $s \in \Sigma(\thr{X_\cons})$ 
\item $\omega^{\iota'(A)}(\overline{x})=
\omega^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)}(\overline{x})$, for
operations $\omega \in \Sigma_\weak(\thr{X_\cons})$  
\item $\cons_s^{\iota'(A)} =
{(\comp{\mu}{\mu'})(\cons_s)}^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)}$.  
\end{itemize}
Thus, the outermost triangle commutes, i.e.,
for any $A\in\Mod(\thr{X_\cons}): ({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'} =
	\iota'(A)$: 
\begin{itemize}\MyLPar
\item sorts:
$s^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}} = s^{\iota'(A)}$ since ${\mu;\mu'}(s) = s$
\item operations:
$\omega^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}} =
\omega^{\iota'(A)}$ since ${\mu;\mu'}(\omega) = \omega$ 
\item subsorts:
$\cons_s^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}} =
{(\comp{\mu}{\mu'})(\cons_s)}^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)} =
\cons_s^{\iota'(A)}$
\end{itemize}
The tight monomorphism $\iota'_A: A \to \iota'(A)$ is
defined $\forall A\in\Mod(\thr{X_\cons})$ by: 
$\iota'_{A} = \iota_A; (\iota_{PA}|_\mu)$, 
where $\iota_A$ and
$\iota_{PA}$ are tight monomorphisms associated with $\iota_{\thr X}$ (and $A$) and
$\iota_{\thr{P[X]}}$ (and $\fu F_{\thr X}(A)$), respectively. 
Since $\iota_{PA}$ is a tight monomorphism, then so is its reduct $\iota_{PA}|_{\mu'}$. Then,
$\iota'_A$, being a composition of two tight monomorphisms, is a tight
monomorphism \cite{catrel}. 

The conditions of fact~\ref{fa:parsemAlt} are satisfied, so we conclude that
$\fu F_{\thr X};\fu F_{\thr{P[X]}}$ is indeed a semantic functor for the
composed PDT.
%%\begin{enumerate}
%%\item $({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'} = \iota'_X(A)$ since:
%%\begin{itemize}
%%\item sorts: \\
%%$s^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}} = s^{\iota'_X(A)}$ since ${\mu;\mu'}(s) = s$
%%\item operations: \\
%%$\omega^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}} =
%%	\omega^{\iota'_X(A)}$ since ${\mu;\mu'}(\omega) = \omega$ 
%%\item subsorts: \\
%%$(\mu;\mu')(\cons_s)^{({\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)})|_{\mu;\mu'}}
%%	= s^{\iota'_X(A)}$ since $\cons_s^{\iota'(A)} =
%%	{(\comp{\mu}{\mu'})(\cons_s)}^{\comp{\fu{F_\thr{X}}}{\fu{F_\thr{P[X]}}}(A)}$ 
%%\end{itemize}
%%\item $\iota'_X$ is a tight monomorphism:
%%\begin{itemize}
%%\item $\iota'_X$ is monomorphism:\\
%%Supose that $\iota'_X$ is not a monomorpism, it means that $\iota'_X(a)=
%%	\iota'_X(a')$, for two distinct elemnets $a, a' \in |A|$, and an
%%	algebra $A \in \Mod(\thr{X_\cons})$. By the definition of $\iota'_X$
%%	it means that $(\iota_X; (\iota_{P[X]}|_\mu))(a) = (\iota_X;
%%	(\iota_{P[X]}|_\mu))(a')$, contradicting the fact that $\iota_X$ and
%%	$\iota_{P[X]}$ is monomorphisms and that the reduct functor preserves
%%	monomorphisms. 
%%\item $\iota'_X$ is tight homomorphism; first note that the reduct of a tight
%%	homomorphism is a tight homomorphism, the claim follows since the
%%	composition of tight homomorphisms is a tight homomorphism.  
%%\end{itemize}
%%\end{enumerate} 
%%Since $\iota_{\thr{X}}$ and $\iota_{\thr{P[X]}}$ are tight monomorphisms, so 
%% $\iota'_{\thr{X}}$ is a tight
%% $\Sigma_\weak(\thr{X})$-monomorphism, too.
\end{PROOF}
The following example illustrates that horisontal composition, introducing an
 intermediary parameter, can actually be a strict refinement of the composed
 PDT, i.e., that some functors admissible as a semantics for the composed PDT
 may no longer be obtained as a composition of the semantic functors for the
 component PDTs.

\begin{example}\label{ex:abstrref}
The following PDT $\thr P=\pdt$ requires extension of the parameter algebra $A$ with a new
function $f$ and allows extending $A$'s carrier with
new elements (one of which may be $d$). 
\[\xymatrix{
\frame{\txt{$\spec{\tit{\mbox{\bf \spec\ X}_\cons=} \\
		\spSort{El}
		\spOps{\allcons}{ \cons: \to El}
		\Gamma:
			& x \prec \cons
}$}}
\ar[rrr]^<<<<<<<<<<<<{\txt{$\large{\mu(\cons)= ok}$}}_<<<<<<<<<<<<{\txt{$\large{\delta(\cons)={\cons}}$}} 
&&& \frame{\txt{$\spec{\tit{\mbox{\bf P[X]}_\cons=} \\
	\spSorts{\Sorts'}{El}
	\spOps{\Ops'}{
		d:	&& El \\
		f: & El & El }
	\spOps{{\allcons}'}{	\cons, ok: && El}
	\Phi':
		&1.& && f(d) \eleq d\\
		&2.&x\prec \cons &\To& f(x) \eleq f(x)\\
		&3.& && ok\prec\cons \\
	\Gamma':&4.& && x \prec \cons\\
}$}}
}
\]
Let the semantic functor $\fu{F}: \Mod(\thr{X_\cons}) \to
	\Mod(\thr{P[X]_\cons})$ send an $A\in\Mod(\thr{X_\cons})$ to $\fu
	F(A)$ given by:
\begin{itemize}\MyLPar
\item $|\fu{F}(A)| = |A| \uplus d$, i.e. $d$ is a new element added to the carrier of $A$,
\item $f^{\fu{F}(A)}(x)= d$, for all $x\in|\fu F(A)|$,
\item $ok^{\fu{F}(A)} = |A|$, by the semantic functor requirement,
\item $\cons^{\fu{F}(A)} = |\fu{F}(A)|$, by default.
\end{itemize}
Let's now introduce $\thr{W[X]_\cons}$ as an intermediary parameter, i.e., we
now have two PDTs $\thr
P'=\pdtsp{\mu'}{\delta'}{\thr{X_\cons}}{\thr{W[X]_\cons}}$ and
$\thr P''=\pdtsp{\mu''}{\delta''}{\thr{W[X]_\cons}}{\thr{P[W[X]]_\cons}}$:
\[ \xymatrix{
\thr{X_\cons}
\ar[rr]^<<<<<<<<<<{\txt{$\large{\mu'(\cons)=\cons}$}}_<<<<<<<<<<{\txt{$\large{\delta'(\cons)=\cons}$}}
&& \frame{\txt{$\spec{
\tit{\thr{W[X]_\cons}=}\\
	\spSorts{\Sorts''}{El}
	\spOps{\Ops''}{f: &El & El}
	\spOps{{\allcons}''}{\cons: && El}
	\Phi'':
		 &2.& x\prec\cons&\To& f(x) \eleq f(x)\\
	\Gamma'':&4.& && x \prec \cons_{EL}\\
}$}}
\ar[rr]^<<<<<<<<<<{\txt{$\large{\mu''(\cons)=ok}$}}_<<<<<<<<<<{\txt{$\large{\delta''(\cons)=\cons}$}}  
&& \thr{P[X]_\cons}=\thr{P[W[X]]_\cons}
}
\]
Obviously, we have that $\thr P=\pdtsp{(\mu';\mu'')}{(\delta';\delta'')}{\thr
X_\cons}{\thr{P[W[X]]_\cons}}$. But the refinement $\thr P\leadsto \thr
P';\thr P''$ is strict -- e.g., the functor $\fu F$ for the former cannot be obtained
by composing any two functors for the latter two.

For any semantic functor $\fu{F'}: \Mod(\thr{X_\cons}) \to\Mod(\thr{W[X]_\cons})$ 
can't extend the carrier of any $A\in \Mod(\thr{X_\cons})$, but 
merely adds a deterministic function $f$. Furthermore, any semantic functor 
$\fu{F''}: \Mod(\thr{W[X]_\cons}) \to\Mod(\thr{P[W[X]]_\cons})$ may add a
new element $d$ to the carrier of a parameter algebra $B\in\Mod(\thr{W[X]_\cons})$ and force
$f(d)\eleq d$. However, $\fu{F''}$ has to ``preserve'' the parameter algebra
$B$, i.e., $B$ must be a tight subalgebra of
$\fu{F''(B)}$. This means that function $f^{\fu F''(B)}$ applied to the elements
from the carrier of $B$ (i.e., from $ok^{\fu F''(B)}$) has to return elements
from the same carrier (as it did in $B$). If $d$ is a new element (as was the
case for $\fu F$), it will never be ``reachable by $f$'' from these old
elements. This illustrates the impossibility
of obtaining the original functor $\fu F$ as a composition of any $\fu F'$
and $\fu F''$.
\end{example}
%
The following gives a more detailed and concrete example of the same idea of refining the structure of
PDT by introducing an intermediary parameter. 
\begin{example}\label{ex:stackref}
We start with a specification of stacks from example~\ref{ex:stackelSP} and
refine it by introducing the intermediary parameter specification of
constructed stacks. To do that we first refine the specification
$\thr{Stack[El]_\cons} \leadsto \thr{Stack[El]'_\cons}$, by adding the the
subsorts $ok_{stack}$, and error constants for stacks and elements: \vspace*{-2ex}
\[\xymatrix{
\frame{\txt{$\spec{
	\tit{\mbox{\bf spec\ El}_\cons^{{}}=} \\
		\spSort{El}
		\spOps{\allcons}{ \cons_{El}: \to El}
		\Gamma:
			& x \prec \cons_{EL}
}$}}
\ar[rrr]^<<<<<<<<<<<<{\txt{$\large{\mu(\cons_{El})=ok}$}}_<<<<<<<<<<<<{\txt{$\large{\delta(\cons_{El})={ok}}$}} &&&
\frame{\txt{$\spec{
\tit{\mbox{\bf spec\ Stack[El]}_\cons=} \\
	\spSorts{\Sorts'}{Stack,El}
	\spOps{\Ops'}{empty: && Stack\\
		top: & Stack & El\\
		pop: & Stack & Stack\\
		push: & El \times Stack & Stack \\
		errStack && Stack \\
		errEl && Nat }
	\spOps{{\allcons}'}{	\cons_{El}, ok_{El}: && El \\
		\cons_{St}, ok_{St}: && Stack }
	\Phi':
		&1.& && empty \eleq empty \\
		&2.& x \prec ok_{El}, s\prec \cons_{St}%, push(x,s) \eleq push(x,s) 
			& \To & top(push(x,s)) \eleq x\\
		&3.& x \prec ok_{El}, s\prec \cons_{St}%, push(x,s) \eleq push(x,s)
			 & \To & pop(push(x,s)) \eleq s \\
		&4.& && pop(empty) \eleq errStack \\
		&5.& && top(empty) \eleq errEl \\
	\Gamma':&6.& && x \prec \cons_{EL}\\
		&7.& && s \prec \cons_{St} \\
}$}}
}
\]
The intermediary parameter $\thr{ConstrStack[El]_\cons}$ contains only the
intended constructors for stacks::
\[\xymatrix{
\thr{El_\cons}
\ar[rrr]^<<<<<<<<<<<<{\txt{$\large{\mu'(\cons_{El})=\cons_{El}}$}}_<<<<<<<<<<<<{\txt{$\large{\delta'(\cons_{El})={\cons_{El}}}$}} &&&
\frame{\txt{$\spec{
\tit{\mbox{\bf spec\ ConstrStack[El]}_\cons=} \\
	\spSorts{\Sorts'}{Stack,El}
	\spOps{\Ops'}{empty: && Stack\\
		push: & El \times Stack & Stack \\}
	\spOps{{\allcons}'}{	\cons_{El}: && El \\
		\cons_{St} : && Stack }
	\Phi':
		&1.& && empty \eleq empty \\
	\Gamma':&6.& && x \prec \cons_{EL}\\
		&7.& && s \prec \cons_{St} \\
}$}}
\ar[rrr]^<<<<<<<<<<<<{\txt{$\mu''(\cons_{El})=ok_{El}$\\$\delta''(\cons_{El})=ok_{El}$}}_<<<<<<<<<<<<<<{\txt{$\mu''(\cons_{St})={ok_{St}}$\\$\delta''(\cons_{St})={ok_{St}}$}}
		&&& \thr{Stack[El]_\cons}
}
\]
Let $\fu F':\Mod(\thr{El_\cons})\to\Mod(\thr{ConstrStack[El]_\cons})$ and
$\fu F'':\Mod(\thr{ConstrStack[El]_\cons})\to\Mod(\thr{Stack[El]_\cons})$ be
 semantic functors for the respective PDTs. 
The effect of the intermediary parameter is that, in any algebra $C=\fu
F''(\fu F'(A))$, both $empty^C$ and all stacks obtained by $push^C$ must
belong to $ok^C_{St}$. 

This reflects the more structured design which need
not apply to a semantic functor of the original PDT
$\pdtsp{\mu}{\delta}{\thr{El_\cons}}{\thr{Stack[El]_\cons}}$, where
$empty$ could be any element of the sort $Stack$, possibly $errStack$ which
could (and should) be outside $ok_{St}$.

The specification $\thr{Stack[El]_\cons}$ does not say anything about
$errStack$ or $errEl$ but these can be new elements added to the carrier of
$B=\fu F'(A)$. (This effect could be forced by the specification by adding the
axioms $errStack\prec ok_{St}\To$, and $errEl\prec ok_{El}\To$.)
\end{example}

\section{Refinement}\label{sub:ref}
We now summarise the concept of refinement of PDT. As we have emphasised, it
amounts not only to the simple model class inclusion but, primarily, to
introduction of additional {\em structure} on the PDTs. The following
definition captures the general concept

\begin{definition}\label{def:ref}
A PDT $\thr
P'=\pdtsp{\mu'}{\delta'}{\thr{X'_\cons}}{\thr{P[X]'_\cons}}$
refines a PDT $\thr P=\pdt$, 
$\thr P\leadsto\thr P'$, if there exist functors
$\reff X:\Mod(\thr  X_\cons)\to\Mod(\thr X'_\cons)$ and
$\reff{P[X]}:\Mod(\thr {P[X]'_\cons})\to\Mod(\thr{P[X]_\cons})$, such that
for any semantic functor $\fu F'$ for $\thr P'$, the functor $\reff X;\fu
F';\reff{P[X]}$ is a semantic funtor for $\thr P$.
\end{definition}
The following diagram illustrates the requirement:
\[ \xymatrix@R=0.5cm@C=0.4cm{
&& \Mod(\thr{X_\cons})  \ar[dd]_{\iota} \ar@{.>}[rrdd]^{\reff{X};\fu{F}';\reff{P[X]}} \ar[lldd]_{\reff{X}}\\
&& && \\
\Mod(\thr{X'_\cons}) \ar[dd]_{\iota'} \ar[rrrdd]^{\fu{F'}}
	&& \Mod(\thr{X_{\weak}}) \ar@{}[ur]|{1.}
		&& \Mod(\thr{P[X]_\cons}) \ar[ll]_{|_{\mu}} \\
&& && \\
\Mod(\thr{X'_{\weak}}) \ar@{}[ur]|{2.}
	&&& \Mod(\thr{P[X]'_\cons}) \ar[lll]^{|_{\mu'}} \ar[uur]_{\reff{P[X]}}
}
\]
The relation is trivially transitive, i.e., $\thr P\leadsto\thr
P'\leadsto\thr P'' \To \thr P\leadsto \thr P''$.

The contravariance of $\reff{X}$ on the parameter side may seem a bit unusual since,
following the idea of refinement as the model class inclusion, one might
expect the refinement relation to hold also when
$\thr{X_\cons}\leadsto\thr{X'_\cons}$, i.e., $\Mod(\thr
X_\cons)\supseteq\Mod(\thr X'_\cons)$. However, one should keep in mind that
we are talking about design specifications of actual structure of data
types/programs. A PDT with source $\thr{X'_\cons}$ could not, in general,
replace a PDT with the source $\thr{X_\cons}\leadsto\thr{X'_\cons}$. 

A simple case is when $\thr{P[X]_\cons}\leadsto\thr{P[X]'_\cons}$, i.e., when
$\reff{X}$ is identity and
$\reff{P[X]}$ is a model class inclusion $\Mod(\thr{P[X]'_\cons})\subseteq
\Mod(\thr{P[X]_\cons})$ (as was the case of vertical composition in subsection~\ref{sub:vertref}). 

Other examples were \ref{ex:abstrref} and \ref{ex:stackref} in
section~\ref{sub:hcsem}, where both $\reff{X}$ and $\reff{P[X]}$ were
identities but where intermediary parameter forced additional requirements
which did not (necessarily) follow from the original, refined PDT.

Finally, we give an example showing an even more particular case of
refinement by adding structure, where the formal parameter of a PDT is itself
refined to a PDT.

\begin{example}
Let $\thr
P=\pdtsp{\mu}{\delta}{\thr{Set}_\cons}{\thr{\choice[Set]_\cons}}$ be the
following PDT which extends a specification of sets with a nondeterministic
choice.
\[\xymatrix{
\frame{\txt{$\spec{
\tit{\mbox{\bf spec\ Set}_\cons^{{}}=} \\
	\spSort{Set,El}
	\spOps{\Ops}{
	\emptyset: && Set \\
	\prep\ : & El\times Set & Set 
	}
	\spOps{\allcons}{ \cons_{El}: \to El \\ \cons_{Set}:\to Set}
	\Phi: & 1.& x\prep (y\prep S) & \eleq & y\prep (x\prep S) \\
	      & 2.& x\prep (x\prep S) & \eleq & x\prep S \\
	\Gamma:
	   &3. & x &\prec &\cons_{EL} \\ 
	   &4. & S &\prec &\cons_{Set}
}$}}
\ar@(u,r)[dr]^{\txt{$\large{\hspace*{1em}\mu(\cons_{El})=\delta(\cons_{El})=ok_{El}}$}}_{\txt{$\large{\mu(\cons_{Set})=\delta(\cons_{Set})=
	\cons_{Set}\ \ }$}}
\\ &
\hspace*{-4em}\frame{\txt{$\spec{
\tit{\thr{\choice[Set]}_\cons=} \\
	\spSort{Set,El}
	\spOps{\Ops}{
	\emptyset: && Set \\
	\prep\ : & El\times Set & Set \\
	\choice : & Set & El
	}
	\spOps{\allcons}{ ok,\cons_{El}: \to El \\ \cons_{Set}:\to Set}
	\Phi: & 1.& x\prec ok,y\prec ok &\To & x\prep (y\prep S)  \eleq  y\prep (x\prep S) \\
	      & 2.& x\prec ok & \To & x\prep (x\prep S)  \eleq  x\prep S \\
	      & 3.& x\prec ok, z\prec \choice(x\prep S) & \To & z\eleq x, z\prec \choice(S)\\
	\Gamma:
   	    &4. &&& x \prec \cons_{EL} \\ 
	    &5. &&& S\prec \cons_{Set}
}$}}
}
\]
We admit here {\bf extending carrier} $El$, $\mu(\cons_{El})=ok$, which is
motivated by the possible need of a new, ``error'' element to be returned by
 $\choice(\emptyset)$.

A possible semantic functor $\fu F$ may send a $\thr{Set}_\cons$ algebra $A$ on the
algebra $\fu F(A)$ where, for any nonempty set $S$, the operation 
$\choice^{\fu F(A)}(S)$ returns all the elements of the set
$S$. $\choice^{\fu F(A)}(\emptyset)$ may return a new, ``error'' element $\bot$,
added to the carrier of $A$. Adding this element to a set, $\bot\prep^{\fu F(A)}S$ may then result in
the emptyset $\emptyset^{\fu F(A)}$.

Obviously, the specification $\thr{Set_\cons}$ can be naturally parameterized
by elements, i.e., we ``extract'' from it a parameter (sub)specification. We
obtain then $\thr P'=\pdtsp{\mu'}{\delta'}{\thr{El}_\cons}{\thr{Set[El]_\cons}}$,
where $\thr{El_\cons}$ contains merely the sort $El$ and the global guard
$x\prec \cons_{El}$, while $\thr{Set[El]_\cons}$ is exactly the same as
$\thr{Set_\cons}$. $\mu'$ and $\delta'$ are identities on $\cons_{El}$. 

The point is now that the composed PDT $\thr P';\thr P$ is a refinement of
$\thr P$ according to definition~\ref{def:ref}. 
\[\xymatrix@C=0.6cm@R=1cm{
\Mod(\thr{El_\cons}) \ar[drr]^{\fu F'} \ar@{.>}[d] && &&
  \Mod(\thr{Set_\cons})  \ar@{.>}[d]
    \ar[llll]_{|_{\mu'}\ =\ \reff{Set}}  \ar@{.>}[drr]^{\fu G} \ar@{.}[dll]|{id} \\
\Mod(\thr{El_\weak}) && \Mod(\thr{Set[El]_\cons})  \ar@{.>}[d] \ar[drr]^{\fu F} \ar[ll]_{|_{\mu'}}
   && \Mod(\thr{Set_\weak}) && \Mod(\thr{\choice[Set]_\cons})
   \ar@{.}[dll]|{id\ =\ \reff{\choice[Set]}} \ar[ll]_{|_{\mu}}\\ 
&& \Mod(\thr{Set[El]_\weak}) && \Mod(\thr{\choice[Set[El]]_\cons}) \ar[ll]_{|_{\mu}}
}
\]
Since $\mu'(\cons_{El})=\cons_{El}$ the $|_{\mu'}$ reduct will, actually,
return an $\thr{El_\cons}$-algebra (and not only an $\thr{El_\weak}$-algebra).

Now, given $\fu F'$ and $\fu F$, the functor $\fu G$ can be trivially chosen
to be $\fu F$, if we let $\reff{Set}$ be identity. More generally, if $\fu F'$ were such that $|_{\mu'};\fu
F'=\fu{id}_{\thr{Set_{\cons}}}$, we will have that $\fu G=\reff{Set};\fu
F';\fu F;\reff{\choice[Set]}=\fu F$. 

However, even in such cases, the refinement consists in requiring a more
structured data type, which consists of building first an algebra of sets
over a given algebra of elements, and then an algebra with choice (i.e., 
composing two functors $\fu F';\fu F$). In
this sense, it is reasonable to call $\thr P';\thr P$ a refinement of $\thr
P$.

 Moreover, the functor $\fu F'$ will not, in general, be surjective on the
 objects, i.e., it may choose only a subclass of all $\thr{Set[El]_\cons}$
 algebras. In this case, the application of the composition to all models of
 $\thr{El_\cons}$, $\fu F';\fu F(\Mod(\thr{El_\cons}))$ may result in fewer
 $\thr{\choice[Set[El]]_\cons}$ algebras than $\fu F(\Mod(\thr{Set[El]_\cons}))$,
 which is another reason for viewing this composition as a refinement of the
 original PDT.
\end{example}
%
There is yet another possibility of viewing the above as an example of
refinement. Suppose that we have implemented the PDT
$\pdtsp{\mu}{\delta}{\thr{Set_\cons}}{\thr{\choice[Set]_\cons}}$, i.e., we
have a functor $\fu G$.  Then, having implemented also a functor $\fu F'$, we
can compose it with $\fu G$. Since $\fu F'$ will not, typically, be
surjective on the objects, this composition will, in general, yield a smaller
subclass of $\Mod(\thr{\choice[Set]_\cons})$ than the image of $\fu G$.

In any case, we can view the above process as a gradual development of a
design for the flat specification $\thr{\choice[Set]_\cons}$. In the first
step, we extract from it the parameter $\thr{Set_\cons}$ which prescribes a
more specific, structured implementation. In the second step, we again extract
the parameter $\thr{El_\cons}$, requiring even more structure. Viewed in this
way, our setting gives a concrete specialisation of the general concept of
``constructor implementations'' from \cite{para1}. A more detailed study of
the methodological possibilities offered by our PDTs is left for a future work.